{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(leaflet)\nlibrary(rgdal)\nlibrary(spatialEco)\n\n# Police zones\npoliceZoneLink <- \"http://bostonopendata-boston.opendata.arcgis.com/datasets/9a3a8c427add450eaf45a470245680fc_5.geojson\"\npoliceZoneFile <- \"./data/policeZone.rds\" \n# Police Stations\npoliceStationLink <- \"http://bostonopendata-boston.opendata.arcgis.com/datasets/e5a0066d38ac4e2abbc7918197a4f6af_6.geojson\"\npoliceStationFile <- \"./data/policeStation.rds\" \n# Polling Locations\npollingLocationLink <- \"http://bostonopendata-boston.opendata.arcgis.com/datasets/f7c6dc9eb6b14463a3dd87451beba13f_5.geojson\"\npollingLocationFile <- \"./data/pollingLocation.rds\"\n\npoliceZoneJson <- rgdal::readOGR(policeZoneLink, \"OGRGeoJSON\")\npoliceStationJson <- rgdal::readOGR(policeStationLink, \"OGRGeoJSON\")\npollingJson <- rgdal::readOGR(pollingLocationLink, \"OGRGeoJSON\")\n\n# if(file.exists(policeZoneFile)){\n#   policeZoneJson <- readRDS(policeZoneFile)\n# }else{\n#   policeZoneJson <- rgdal::readOGR(policeZoneLink, \"OGRGeoJSON\")\n#   saveRDS(policeZoneJson, policeZoneFile)\n# }\n# \n# if(file.exists(policeStationFile)){\n#   policeStationJson <- readRDS(policeStationFile)\n# }else{\n#   policeStationJson <- rgdal::readOGR(policeStationLink, \"OGRGeoJSON\")\n#   saveRDS(policeStationJson, policeStationFile)\n# }\n# \n# if(file.exists(pollingLocationFile)){\n#   pollingJson <- readRDS(policeStationFile)\n# }else{\n#   pollingJson <- rgdal::readOGR(pollingLocationLink, \"OGRGeoJSON\")\n#   saveRDS(pollingJson, pollingLocationFile)\n# }\n\n\n\n\n\n# functions to get number of locations in each zone\npts.poly <- point.in.poly(pollingJson, policeZoneJson)\nnumPollsInZones <- tapply(pts.poly@data$DISTRICT, pts.poly@data$ID, FUN=length)\n\n\nui <- bootstrapPage(\n  tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\n  leafletOutput(\"map\", width = \"100%\", height = \"100%\"),\n  absolutePanel(top = 10, right = 10,\n                # sliderInput(\"range\", \"Magnitudes\", min(quakes$mag), max(quakes$mag),\n                #             value = range(quakes$mag), step = 0.1\n                # ),\n                selectInput(\"datasets\", \"Data Set\", c(\"Police and Polls\", \"Green Neighborhoods\")),\n                checkboxInput(\"stationCheckbox\", \"Police Stations\", TRUE),\n                checkboxInput(\"zoneCheckbox\", \"Police Zones\", TRUE)\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  output$map <- renderLeaflet({\n    leaflet() %>%\n      # the styling of the map itself\n      addProviderTiles(providers$CartoDB.Positron,\n                       options = providerTileOptions(noWrap = TRUE)\n      ) %>%\n      # the legend for the shading of the zones\n      addLegend(\"bottomright\", pal = colorNumeric(\n        palette = \"YlOrRd\",\n        domain = numPollsInZones\n      ), values = numPollsInZones, title = \"Polling Stations In Police District\",\n      opacity = 1) %>%\n      # centering the view on a specific location (Boston)\n      fitBounds(-71.5, 42, -70.5, 42.5) %>%\n      # adding the markers\n      addCircleMarkers(data = policeStationJson, color = \"purple\",\n                       radius = 5, stroke = FALSE, label = ~NAME,\n                       fillOpacity = 0.7, group = \"stations\") %>%\n      # adding the zones\n      addPolygons(data = policeZoneJson, weight = 2, color = \"blue\",\n                  fill = TRUE, label = paste(as.character(numPollsInZones), \" polling stations\"), \n                  fillColor = colorQuantile(\"YlOrRd\", numPollsInZones)(numPollsInZones),\n                  group = \"zones\")\n  });\n  \n  # logic to show or hide different groups\n  observe({\n    proxy <- leafletProxy(\"map\") \n    if (input$stationCheckbox){\n      proxy %>% showGroup(\"stations\")\n    }else{\n      proxy %>% hideGroup(\"stations\")\n    }\n  })\n  \n  observe({\n    m <- leafletProxy(\"map\")\n    if (input$zoneCheckbox){\n      m %>% showGroup(\"zones\")\n    }else{\n      m %>% hideGroup(\"zones\")\n    }\n  })\n  \n  # observe({\n  #   if(input$datasets == \"Police and Polls\"){\n  #     policeZoneJson = rgdal::readOGR(policeZoneLink, \"OGRGeoJSON\")\n  #   }else if(input$datasets == \"Green Neighborhoods\"){\n  #     policeZoneJson = rgdal::readOGR(neighborhoodLink, \"OGRGeoJSON\")\n  #   }\n  #   print(input$datasets)\n  # })\n}\n\nshinyApp(ui, server)",
    "created" : 1499458414604.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3586083789",
    "id" : "A6CA60EF",
    "lastKnownWriteTime" : 1498164700,
    "last_content_update" : 1498164700,
    "path" : "~/Documents/Boston Fellows/dataPortal/examples/ShinyZoneExample.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}